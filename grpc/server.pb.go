// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	PublishRequest
	PublishResponse
	SubscribeRequest
	SubscribeResponse
	AckRequest
	AckResponse
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublishRequest struct {
	Topic    string            `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Message  []byte            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PublishRequest) Reset()                    { *m = PublishRequest{} }
func (m *PublishRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()               {}
func (*PublishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PublishRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PublishRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type PublishResponse struct {
}

func (m *PublishResponse) Reset()                    { *m = PublishResponse{} }
func (m *PublishResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()               {}
func (*PublishResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SubscribeRequest struct {
	Topic          string            `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	SubscriptionId string            `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
	Filter         map[string]string `protobuf:"bytes,3,rep,name=filter" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SubscribeRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SubscribeRequest) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *SubscribeRequest) GetFilter() map[string]string {
	if m != nil {
		return m.Filter
	}
	return nil
}

type SubscribeResponse struct {
	MessageId string            `protobuf:"bytes,1,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	Message   []byte            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Metadata  map[string]string `protobuf:"bytes,3,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SubscribeResponse) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *SubscribeResponse) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SubscribeResponse) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type AckRequest struct {
	Topic          string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	SubscriptionId string `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
	MessageId      string `protobuf:"bytes,3,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
}

func (m *AckRequest) Reset()                    { *m = AckRequest{} }
func (m *AckRequest) String() string            { return proto.CompactTextString(m) }
func (*AckRequest) ProtoMessage()               {}
func (*AckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AckRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *AckRequest) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *AckRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

type AckResponse struct {
}

func (m *AckResponse) Reset()                    { *m = AckResponse{} }
func (m *AckResponse) String() string            { return proto.CompactTextString(m) }
func (*AckResponse) ProtoMessage()               {}
func (*AckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*PublishRequest)(nil), "grpc.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "grpc.PublishResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "grpc.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "grpc.SubscribeResponse")
	proto.RegisterType((*AckRequest)(nil), "grpc.AckRequest")
	proto.RegisterType((*AckResponse)(nil), "grpc.AckResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for PubSub service

type PubSubClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc1.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc1.CallOption) (PubSub_SubscribeClient, error)
	Ack(ctx context.Context, in *AckRequest, opts ...grpc1.CallOption) (*AckResponse, error)
}

type pubSubClient struct {
	cc *grpc1.ClientConn
}

func NewPubSubClient(cc *grpc1.ClientConn) PubSubClient {
	return &pubSubClient{cc}
}

func (c *pubSubClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc1.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := grpc1.Invoke(ctx, "/grpc.PubSub/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc1.CallOption) (PubSub_SubscribeClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_PubSub_serviceDesc.Streams[0], c.cc, "/grpc.PubSub/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubSub_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc1.ClientStream
}

type pubSubSubscribeClient struct {
	grpc1.ClientStream
}

func (x *pubSubSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pubSubClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc1.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := grpc1.Invoke(ctx, "/grpc.PubSub/Ack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PubSub service

type PubSubServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Subscribe(*SubscribeRequest, PubSub_SubscribeServer) error
	Ack(context.Context, *AckRequest) (*AckResponse, error)
}

func RegisterPubSubServer(s *grpc1.Server, srv PubSubServer) {
	s.RegisterService(&_PubSub_serviceDesc, srv)
}

func _PubSub_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServer).Publish(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PubSub/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSub_Subscribe_Handler(srv interface{}, stream grpc1.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubSubServer).Subscribe(m, &pubSubSubscribeServer{stream})
}

type PubSub_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc1.ServerStream
}

type pubSubSubscribeServer struct {
	grpc1.ServerStream
}

func (x *pubSubSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PubSub_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServer).Ack(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PubSub/Ack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PubSub_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.PubSub",
	HandlerType: (*PubSubServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PubSub_Publish_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _PubSub_Ack_Handler,
		},
	},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PubSub_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xcb, 0x4a, 0xc3, 0x40,
	0x14, 0xed, 0x34, 0xda, 0x9a, 0xdb, 0xf7, 0x50, 0x35, 0x04, 0x84, 0x12, 0x10, 0xbb, 0x90, 0x20,
	0x75, 0x53, 0x2b, 0x88, 0x5d, 0x28, 0x74, 0x21, 0x94, 0xf4, 0x03, 0x24, 0x8f, 0xb1, 0xc6, 0x3e,
	0x12, 0x67, 0x26, 0x85, 0xfe, 0x96, 0x7b, 0xf7, 0x2e, 0xfc, 0x28, 0x49, 0x67, 0x5a, 0x93, 0xb6,
	0x16, 0x04, 0xdd, 0xe5, 0x9e, 0x9c, 0xb9, 0x67, 0xce, 0xb9, 0x77, 0xa0, 0xc8, 0x08, 0x9d, 0x11,
	0x6a, 0x86, 0x34, 0xe0, 0x01, 0xde, 0x1b, 0xd2, 0xd0, 0x35, 0xde, 0x11, 0x94, 0xfb, 0x91, 0x33,
	0xf6, 0xd9, 0xb3, 0x45, 0x5e, 0x23, 0xc2, 0x38, 0xae, 0xc3, 0x3e, 0x0f, 0x42, 0xdf, 0xd5, 0x50,
	0x03, 0x35, 0x55, 0x4b, 0x14, 0x58, 0x83, 0xfc, 0x84, 0x30, 0x66, 0x0f, 0x89, 0x96, 0x6d, 0xa0,
	0x66, 0xd1, 0x5a, 0x96, 0xf8, 0x06, 0x0e, 0x26, 0x84, 0xdb, 0x9e, 0xcd, 0x6d, 0x4d, 0x69, 0x28,
	0xcd, 0x42, 0xcb, 0x30, 0xe3, 0xde, 0x66, 0xba, 0xaf, 0xf9, 0x20, 0x49, 0x77, 0x53, 0x4e, 0xe7,
	0xd6, 0xea, 0x8c, 0x7e, 0x0d, 0xa5, 0xd4, 0x2f, 0x5c, 0x05, 0x65, 0x44, 0xe6, 0x52, 0x3e, 0xfe,
	0x8c, 0xaf, 0x34, 0xb3, 0xc7, 0x91, 0x90, 0x56, 0x2d, 0x51, 0x74, 0xb2, 0x6d, 0x64, 0xd4, 0xa0,
	0xb2, 0x92, 0x61, 0x61, 0x30, 0x65, 0xc4, 0xf8, 0x40, 0x50, 0x1d, 0x44, 0x0e, 0x73, 0xa9, 0xef,
	0x90, 0xdd, 0xa6, 0xce, 0xa0, 0xc2, 0x04, 0x33, 0xe4, 0x7e, 0x30, 0x7d, 0xf4, 0x3d, 0xa9, 0x50,
	0x4e, 0xc2, 0x3d, 0x0f, 0x77, 0x20, 0xf7, 0xe4, 0x8f, 0x39, 0xa1, 0x69, 0x87, 0xeb, 0x32, 0xe6,
	0xfd, 0x82, 0x24, 0x1c, 0xca, 0x13, 0xfa, 0x15, 0x14, 0x12, 0xf0, 0xaf, 0xdc, 0x7d, 0x22, 0xa8,
	0x25, 0x34, 0x84, 0x41, 0x7c, 0x02, 0x20, 0xb3, 0x8f, 0x2f, 0x2c, 0x1a, 0xa9, 0x12, 0xe9, 0x79,
	0x3b, 0x26, 0xd5, 0xdd, 0x98, 0xd4, 0xe9, 0x86, 0x0f, 0xa1, 0xf1, 0x3f, 0xc3, 0x7a, 0x01, 0xe8,
	0xba, 0xa3, 0x3f, 0x1a, 0x49, 0x3a, 0x05, 0x65, 0x2d, 0x05, 0xa3, 0x04, 0x85, 0x85, 0x96, 0xf0,
	0xd3, 0x7a, 0x43, 0x90, 0xeb, 0x47, 0xce, 0x20, 0x72, 0x70, 0x1b, 0xf2, 0x72, 0x65, 0x70, 0x7d,
	0xdb, 0xa2, 0xea, 0x87, 0x6b, 0xa8, 0xdc, 0xab, 0x0c, 0xbe, 0x05, 0x75, 0x95, 0x14, 0x3e, 0xda,
	0xbe, 0x02, 0xfa, 0xf1, 0x0f, 0x91, 0x1a, 0x99, 0x0b, 0x84, 0xcf, 0x41, 0xe9, 0xba, 0x23, 0x5c,
	0x15, 0x9c, 0xef, 0x30, 0xf4, 0x5a, 0x02, 0x59, 0xf2, 0x9d, 0xdc, 0xe2, 0xa5, 0x5e, 0x7e, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x23, 0x1f, 0x43, 0xfe, 0xb9, 0x03, 0x00, 0x00,
}
